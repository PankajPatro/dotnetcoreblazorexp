<Project>
  <PropertyGroup>
    <MonoIncomingDir>$(MSBuildThisFileDirectory)incoming\</MonoIncomingDir>
    <MonoDistDir>$(MSBuildThisFileDirectory)dist\</MonoDistDir>
    <MonoUnoptimizedDir>$(MonoDistDir)unoptimized\</MonoUnoptimizedDir>
    <MonoOptimizedDir>$(MonoDistDir)optimized\</MonoOptimizedDir>
  </PropertyGroup>

  <ItemGroup>
    <AsmJsItemsToCopy Include="$(MonoUnoptimizedDir)asmjs\**" />
    <WasmItemsToCopy Include="$(MonoUnoptimizedDir)wasm\**" />
    <BclItemsToCopy Include="$(MonoIncomingDir)bcl\**" />
  </ItemGroup>

  <Target Name="OptimizeMono" DependsOnTargets="OptimizeMonoWasm; OptimizeMonoAsmJs; OptimizeBcl" />

  <Target Name="OptimizeMonoWasm"
          Inputs="@(WasmItemsToCopy)"
          Outputs="@(WasmItemsToCopy->'$(MonoOptimizedDir)wasm\%(RecursiveDir)%(FileName)%(Extension)')">
    <!-- TODO: Implement WASM code stripping like in prototype -->
    <Message Importance="High" Text="Creating optimized Mono WebAssembly build" />
    <Copy SourceFiles="@(WasmItemsToCopy)"
          DestinationFiles="@(WasmItemsToCopy->'$(MonoOptimizedDir)wasm\%(RecursiveDir)%(FileName)%(Extension)')" />
  </Target>

  <Target Name="OptimizeMonoAsmJs"
          Inputs="@(AsmJsItemsToCopy)"
          Outputs="@(AsmJsItemsToCopy->'$(MonoOptimizedDir)asmjs\%(RecursiveDir)%(FileName)%(Extension)')">
    <!-- TODO: Implement asm.js stripping like in prototype -->
    <Message Importance="High" Text="Creating optimized Mono asm.js build" />
    <Copy SourceFiles="@(AsmJsItemsToCopy)"
          DestinationFiles="@(AsmJsItemsToCopy->'$(MonoOptimizedDir)asmjs\%(RecursiveDir)%(FileName)%(Extension)')" />
  </Target>

  <Target Name="OptimizeBcl"
          Inputs="@(BclItemsToCopy)"
          Outputs="@(BclItemsToCopy->'$(MonoOptimizedDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')">
    <!-- TODO: Implement IL stripping like in prototype -->
    <Message Importance="High" Text="Creating optimized BCL build" />
    <Copy SourceFiles="@(BclItemsToCopy)"
          DestinationFiles="@(BclItemsToCopy->'$(MonoOptimizedDir)bcl\%(RecursiveDir)%(FileName)%(Extension)')" />
  </Target>

  <Target Name="BuildMonoEmcc">
    <PropertyGroup>
      <CommonEmccArgs>-Oz --llvm-opts 2 --llvm-lto 1 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s BINARYEN=1 -s &quot;BINARYEN_TRAP_MODE='clamp'&quot; -s TOTAL_MEMORY=134217728 -s ALIASING_FUNCTION_POINTERS=0  --js-library library_mono.js driver.c libmonosgen-2.0.a -s NO_EXIT_RUNTIME=1 -s "EXTRA_EXPORTED_RUNTIME_METHODS=['ccall', 'FS_createPath', 'FS_createDataFile', 'cwrap', 'setValue', 'getValue', 'UTF8ToString']"</CommonEmccArgs>
    </PropertyGroup>

    <!--
      Build WASM version of Mono.
      This does not run on every build - it only runs if you explicitly call "dotnet msbuild mono.targets /t:BuildMonoEmcc"
      For it to succeed, you need to run in a command prompt that has emcc already activated.
    -->
    <Message Importance="high" Text="Building mono.wasm..." />
    <Exec WorkingDirectory="$(MonoIncomingDir)"
          Command="emcc $(CommonEmccArgs) -s &quot;BINARYEN_METHOD='native-wasm'&quot; -o $(MonoUnoptimizedDir)\wasm\mono.js" />

    <!-- 
      Also build asm.js version of Mono
      It works better to build the different formats separately intead of defining multiple BINARYEN_METHOD entries,
      because we want different selection and fallback logic than Emscripten generates on its own
    -->
    <Message Importance="high" Text="Building mono.asm.js..." />
    <Exec WorkingDirectory="$(MonoIncomingDir)"
          Command="emcc $(CommonEmccArgs) -s &quot;BINARYEN_METHOD='asmjs'&quot; -o $(MonoUnoptimizedDir)\asmjs\mono.js" />

    <!-- These files are not needed -->
    <Delete Files="$(MonoUnoptimizedDir)\wasm\mono.js.map" />
    <Delete Files="$(MonoUnoptimizedDir)\wasm\mono.wast" />
    <Delete Files="$(MonoUnoptimizedDir)\asmjs\mono.wasm" />
  </Target>
</Project>
